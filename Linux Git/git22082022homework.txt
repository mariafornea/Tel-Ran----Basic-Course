1. GitHub это интернет платформа, для хранения файлов, исходного кода, проектов...Он сильно облегчает жизнь разработчикам, так как повзоляет не только где-то
надежно хранить исходный код, не опасаясь случайного удаления файла или долго поиска папки с ним на своем пк, но так же просматривать открытые проекты других
разработчиков, подчеркивая для себя что-то новое, обращая внимание на ошибки, которые кто-то уже сделал за тебя, находя более простые варианты решения какой-то
задачи. Так же он удобен для тех, кто работает над одним проектом в группе, так как исходный код хранится не у одного конкретного человека на его пк, а на платформе,
к которой каждый из них имеет доступ и в любой момент может внести свои изменения. 

2.Репозиторий это хранилище файлов, проектов, операций над самим репозиторием. По сути, это папка с файлами или своего рода база данных. К репозиторию можно
обратиться при помощи команды git log, это позволит нам найти конкретную версию проекта.

3. .gitignore используется для того, чтобы указать те файлы, которые должны быть проигнорированы. Эти файлы будут скрыты от системы контроля версий Git. Так
мы можем скрыть временные файли или папки, или те конфигурации, которые содержат пароль.

4. Если мы решили внести некоторые изменения в файл не на самой платформе, а на своем устройстве, а затем нам нужно добавить уже измененный файл обратно в 
репозиторий, мы используем commit. По сути система сравнит исходную версию файла и ту, в которую мы внесли имзенения, и добавит эти же изменения в проект. 

5.  git add - добавляет содержимое папки в индекс, для последующиего коммита. 
	git status - показывает состояние файлов в папке - какие файли были изменены, но не проиндексированы, какие находятся в очереди на коммит.
	git diff - показывает отличия между двумя git деревьями. По сути это разница между рабочим каталогом и индексом.
	git commit - собирает все данные добавленные в индеск с помощью коммита и добавляет их слепок во внутреннюю базу данных. 
	git reset - используется для отмены изменений. она изменяет указатель head и состояние индекса.
	git rm - удаляет файл из индекса и рабочей копии.
	git mv - позволяет удобно переместить файл, добавить его в новую папку (git add) и удалить из старой (git rm)
	git clean - удаляет мусор из рабочей папки (файли конфликтов слияний или результаты сборки проекта)

6. Для первоначальной настройка аккаунта локального пользователя мы используем команду git config, которая позволяет просматривать и настраивать параметры, в 
том числе и внешний вид. Для сохранения параметров конкретного пользователя, при запуске git config необходимо указать параметр --global, в этом случае указанные 
параметры будут применены ко всем репозиториям, с которыми мы будем работать в этой системе. Если при запуске git config указать параметр --system,то параметры
 будут читаться и сохраняться именно в этот файл. Но при этом требуются права суперпользователя, если мы захотим внести в него какие-то изменения. Если не указать
 один из этих двух параметров, то по умолчанию будет использоваться значение --local. Чтобы просмотреть сохраненные настройки и узнать где именно они находятся, 
 используем команду $ git config --list --show-origin. Далее мы можем указать имя и электронную почту, для последующего сохранения коммитов. Для этого пишем команды
 $ git config --global user.name "Maria" , $ git config --global user.email mariafornea@gmail.com.
 
7. Можно создать репозиторий git в уже существующем каталоге. Для этого необходимо ввести в терминале команду $ cd /home/user/my_project, так мы перейдем каталог.
Затем пишем $ git init, инициализируя новый репозиторий. Таким образом в нашем существующем каталоге появится новый подкаталог .git в которм будут все необходимые
файлы для репозитория.

8. Для добавления файла в репозиторий используется команда git add. Если необходимо добавить все файлы - " git add . ". Если один - указываем имя файла или путь к нему + имя.
После подготовки файла, отправляем его на коммит - git commit -m "Комментарий".
 
9. Для просмотра истории коммитов используется команда git log.

